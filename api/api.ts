import { request } from "https"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL API
function getApiBaseUrl(): string {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (typeof window !== 'undefined') {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const apiUrl = process.env.NEXT_PUBLIC_API_URL;
    if (apiUrl) {
      return apiUrl;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      return 'http://localhost:8000';
    }
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º IP –ü–ö
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ü–ö
    return 'http://192.168.0.126:8000';
  }
  
  // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ localhost
  return process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
}

const API_BASE_URL = getApiBaseUrl();

export async function functionGetAllUsers() {
    const res = await fetch(`${API_BASE_URL}/tasks/get_all_tasks`)
    if (!res.ok) throw new Error("OSHIBKA BLAT!")
    return res.json()
}

export async function functionCreateTask(task: {Task: string;}) {
  try {
    const res = await fetch(`${API_BASE_URL}/tasks/create_task`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(task)
    });

    if (!res.ok) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
      const errorData = await res.json().catch(() => null);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      console.error("Full error response:", errorData);
      
      throw new Error(
        errorData?.detail?.[0]?.msg || 
        errorData?.message || 
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${res.status}`
      );
    }

    return res.json();
  } catch (error) {
    console.error("Network error:", error);
    throw error;
  }
}

export async function functionDeleteTask(id: number) {
  try {
    const res = await fetch(`${API_BASE_URL}/tasks/delete_task_by_id/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });

    if (!res.ok) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
      const errorData = await res.json().catch(() => null);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      console.error("Full error response:", errorData);
      
      throw new Error(
        errorData?.detail?.[0]?.msg || 
        errorData?.message || 
        `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${res.status}`
      );
    }
    return res.json()
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", e);
    throw e;
  }
}

export async function functionUpdateTask(id: number, updatedTask: {Task: string}) {
  try {
    const res = await fetch(`${API_BASE_URL}/tasks/update_task_by_id/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(updatedTask)
    });

    if (!res.ok) {
      const errorData = await res.json().catch(() => null);
      console.error("Full error response:", errorData);
      throw new Error(
        errorData?.detail?.[0]?.msg || 
        errorData?.message || 
        `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${res.status}`
      );
    }
    return res.json()
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", e);
    throw e;
  }
}

export async function testAllEndpoints() {
  const endpoints = [
    `${API_BASE_URL}/tasks/get_all_tasks`,
    `${API_BASE_URL}/tasks/create_task`, 
    `${API_BASE_URL}/tasks/delete_task_by_id`,
    `${API_BASE_URL}/tasks/delete`,
    `${API_BASE_URL}/tasks/remove`,
    `${API_BASE_URL}/tasks/remove_task`,
    `${API_BASE_URL}/task/delete`,
    `${API_BASE_URL}/task/remove`,
    `${API_BASE_URL}/api/tasks/delete`,
    `${API_BASE_URL}/api/tasks/remove`
  ];

  console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...");
  
  for (const endpoint of endpoints) {
    try {
      const res = await fetch(endpoint, { method: "GET" });
      console.log(`‚úÖ ${endpoint}: ${res.status} ${res.statusText}`);
    } catch (error) {
      console.log(`‚ùå ${endpoint}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏`);
    }
  }
}