"use client";

import { functionGetAllUsers, functionCreateTask, functionDeleteTask, functionUpdateTask } from "@/api/api";
import { useEffect, useState } from "react";
import "./todo-styles.css";

export default function Home() {
  const [tasks, setTasks] = useState<any[]>([]);
  const [error, setError] = useState("");
  const [newTaskText, setNewTaskText] = useState("")
  const [isAdding, setIsAdding] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [editingId, setEditingId] = useState<number | null>(null)
  const [editingText, setEditingText] = useState("")
  const [isUpdating, setIsUpdating] = useState(false)
  const [isDarkTheme, setIsDarkTheme] = useState(true)

  useEffect(() => {
    functionGetAllUsers()
      .then((data) => {
        console.log("–û—Ç–≤–µ—Ç –æ—Ç API:", data);
        setTasks(data);
      })
      .catch((e: any) => setError(e.message));
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    setIsDarkTheme(prefersDark)
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
    const handleChange = (e: MediaQueryListEvent) => {
      setIsDarkTheme(e.matches)
    }
    
    mediaQuery.addEventListener('change', handleChange)
    
    return () => mediaQuery.removeEventListener('change', handleChange)
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  useEffect(() => {
    const interval = setInterval(async () => {
      try {
        const updatedTasks = await functionGetAllUsers()
        setTasks(updatedTasks)
        console.log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", e)
      }
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, []);

  // –ë–ª–æ–∫ –∫–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —è –¥–æ–±–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewTaskText(e.target.value);
  };
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleAddTask = async (e: React.FormEvent<HTMLButtonElement>) => {
    // –ü—Ä–æ–≤–µ—Ä—è—é, –Ω–µ –ø—É—Å—Ç–æ–µ –ª–∏ –ø–æ–ª–µ
    if (!newTaskText.trim()) {
      setError("Field is EMPTY!")
      return
    }
    setError("")
    setIsAdding(true)

    try{
      await functionCreateTask({
        Task: newTaskText
      })
      console.log("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞");

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const updatedTasks = await functionGetAllUsers()
      setTasks(updatedTasks)
      setNewTaskText("");
    } catch (e){
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", e)
      setError(e instanceof Error ? e.message : "–ß—Ç–æ —Ç–æ –ø—Ä–æ–µ–±–∞–ª–æ—Å—å")
    } finally {
      setIsAdding(false)
    }
  }

  const handleTaskDeleter = async (id: number) => {
    try{
      setIsDeleting(true)
      await functionDeleteTask(id)
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      const updatedTasks = await functionGetAllUsers()
      setTasks(updatedTasks)
    } catch (e: unknown) {
      if (e instanceof Error) {
        setError(e.message)
      } else {
        setError("Unknown error occurred")
      }
    } finally {
      setIsDeleting(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  const handleRefreshTasks = async () => {
    try {
      setIsRefreshing(true)
      setError("")
      const updatedTasks = await functionGetAllUsers()
      setTasks(updatedTasks)
      console.log("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω")
    } catch (e: unknown) {
      if (e instanceof Error) {
        setError(e.message)
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
      }
    } finally {
      setIsRefreshing(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleStartEdit = (task: any) => {
    setEditingId(task.id)
    setEditingText(task.Task)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSaveEdit = async () => {
    if (!editingId || !editingText.trim()) return

    try {
      setIsUpdating(true)
      setError("")
      
      await functionUpdateTask(editingId, { Task: editingText.trim() })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTasks(tasks.map(task => 
        task.id === editingId 
          ? { ...task, Task: editingText.trim() }
          : task
      ))
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setEditingId(null)
      setEditingText("")
      
      console.log("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    } catch (e: unknown) {
      if (e instanceof Error) {
        setError(e.message)
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
      }
    } finally {
      setIsUpdating(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleCancelEdit = () => {
    setEditingId(null)
    setEditingText("")
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  const toggleTheme = () => {
    setIsDarkTheme(!isDarkTheme)
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    if (isDarkTheme) {
      document.documentElement.style.setProperty('color-scheme', 'light')
    } else {
      document.documentElement.style.setProperty('color-scheme', 'dark')
    }
  }

  if (error) return (
    <div className="todo-error">
      –û—à–∏–±–∫–∞: {error}
    </div>
  );

  return (
    <div className="todo-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="todo-header">
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', maxWidth: '600px', margin: '0 auto' }}>
          <h1 className="todo-title">
            Project ToDo
          </h1>
          <button 
            onClick={toggleTheme}
            style={{
              padding: '10px',
              borderRadius: '50%',
              border: 'none',
              background: 'rgba(255, 255, 255, 0.1)',
              color: 'var(--text-color)',
              cursor: 'pointer',
              fontSize: '20px',
              backdropFilter: 'blur(10px)',
              transition: 'all 0.3s ease'
            }}
            title={isDarkTheme ? "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É" : "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É"}
          >
            {isDarkTheme ? "‚òÄÔ∏è" : "üåô"}
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="todo-content">
        
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div className="todo-input-section">
          <input 
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
            value={newTaskText}
            onChange={handleInputChange}
            disabled={isAdding}
            className="todo-input"
          />
          <div className="todo-button-group">
            <button 
              onClick={handleAddTask}
              disabled={isAdding || !newTaskText.trim()}
              className="todo-button"
            >
              {isAdding ? "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ..." : "–í–Ω–µ—Å—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫"}
            </button>
            
            <button 
              onClick={handleRefreshTasks}
              disabled={isRefreshing}
              className="todo-button"
            >
              {isRefreshing ? "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"}
            </button>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
        <div className="todo-section">
          <h2 className="todo-section-title">
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
          </h2>
          
          {tasks.length === 0 ? (
            <div className="todo-empty-state">
              <p className="todo-empty-text">
                –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!
              </p>
            </div>
          ) : (
            <div className="todo-list">
              {tasks.map((task: any) => (
                <div key={task.id} className={`todo-item ${editingId === task.id ? 'editing' : ''}`}>
                  {editingId === task.id ? (
                    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    <>
                      <input
                        type="text"
                        value={editingText}
                        onChange={(e) => setEditingText(e.target.value)}
                        className="todo-edit-input"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            handleSaveEdit()
                          }
                        }}
                      />
                      <button 
                        onClick={handleSaveEdit}
                        disabled={isUpdating || !editingText.trim()}
                        className="todo-button edit"
                      >
                        {isUpdating ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "üíæ"}
                      </button>
                      <button 
                        onClick={handleCancelEdit}
                        disabled={isUpdating}
                        className="todo-button cancel"
                      >
                        ‚ùå
                      </button>
                    </>
                  ) : (
                    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    <>
                      <span className="todo-text">
                        {task.Task}
                      </span>
                      <button 
                        onClick={() => handleStartEdit(task)}
                        disabled={isDeleting || isUpdating}
                        className="todo-button edit"
                        style={{ marginLeft: '10px' }}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        onClick={() => handleTaskDeleter(task.id)}
                        disabled={isDeleting || isUpdating}
                        className="todo-button delete"
                      >
                        {isDeleting ? "–£–¥–∞–ª–µ–Ω–∏–µ..." : "üóëÔ∏è"}
                      </button>
                    </>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>

  );
}